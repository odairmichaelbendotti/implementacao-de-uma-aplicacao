generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String    @unique
  age           Int?
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  clinicId      String?
  accounts      Account[]
  sessions      Session[]
  clinic        clinics?  @relation(fields: [clinicId], references: [id])

  @@index([clinicId], map: "user_clinicId_fkey")
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "account_userId_fkey")
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model appointments {
  id        String   @id
  date      DateTime
  patientId String
  doctorId  String
  clinicId  String
  horario   String
  clinics   clinics  @relation(fields: [clinicId], references: [id], onDelete: Cascade, map: "Appointments_clinicId_fkey")
  doctors   doctors  @relation(fields: [doctorId], references: [id], onDelete: Cascade, map: "Appointments_doctorId_fkey")
  patients  patients @relation(fields: [patientId], references: [id], onDelete: Cascade, map: "Appointments_patientId_fkey")

  @@index([clinicId], map: "Appointments_clinicId_fkey")
  @@index([doctorId], map: "Appointments_doctorId_fkey")
  @@index([patientId], map: "Appointments_patientId_fkey")
}

model clinics {
  id           String         @id
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  appointments appointments[]
  doctors      doctors[]
  users        User[]
}

model doctors {
  id                    String         @id
  name                  String
  avatarImg             String?
  speciality            String
  availableFromWeekDay  String
  availableToWeekDay    String
  availableFromTime     String
  availableToTime       String
  appointmentPriceDents Int
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now())
  clinicId              String
  appointments          appointments[]
  clinics               clinics        @relation(fields: [clinicId], references: [id], map: "Doctors_clinicId_fkey")

  @@index([clinicId], map: "Doctors_clinicId_fkey")
}

model patients {
  id           String          @id
  name         String
  email        String          @unique(map: "Patients_email_key")
  phoneNumber  String          @unique(map: "Patients_phoneNumber_key")
  gender       patients_gender
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now())
  appointments appointments[]
}

enum patients_gender {
  FEM
  MASC
  OUTRO
}
