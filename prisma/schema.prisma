generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  age           Int?
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  clinicId String?
  clinic   Clinics? @relation(fields: [clinicId], references: [id])

  @@unique([email])
  @@map("user")
}

model Clinics {
  id          String         @id @default(cuid())
  name        String
  appointment Appointments[]
  doctors Doctors[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  users       User[]
}

model Doctors {
  id                    String         @id @default(cuid())
  name                  String
  avatarImg             String?
  speciality            String
  availableFromWeekDay  String
  availableToWeekDay    String
  availableFromTime     String
  availableToTime       String
  appointmentPriceDents Int
  appointment           Appointments[]
  clinicId String
  clinic Clinics @relation(fields: [clinicId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now())
}

enum Gender {
  FEM
  MASC
  OUTRO
}

model Patients {
  id          String         @id @default(cuid())
  name        String
  email       String         @unique
  phoneNumber String         @unique
  gender      Gender
  appointment Appointments[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
}

model Appointments {
  id   String   @id @default(cuid())
  date DateTime

  patientId String
  patient   Patients @relation(fields: [patientId], references: [id], onDelete: Cascade)

  doctorId String
  doctor   Doctors @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  clinicId String
  clinic   Clinics @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
